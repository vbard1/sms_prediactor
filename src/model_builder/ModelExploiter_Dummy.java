package src.model_builder;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import javax.swing.*;

public class ModelExploiter_Dummy {

  private WordTree wordTree;
  private String currentSentence;
  private WordTree currentWord;
  private JTextArea inputTextArea;
  private JTextArea suggestionsTextArea;
  private JTextArea constructedSentenceTextArea;

  public ModelExploiter_Dummy(WordTree wordTree) {
    this.wordTree = wordTree;
    this.currentWord = wordTree;
    this.currentSentence = "";
  }

  public void start() {
    JFrame frame = new JFrame("Model Exploiter");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(600, 400);

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

    JLabel inputLabel = new JLabel("Enter a sentence:");
    inputTextArea = new JTextArea(5, 20);
    JScrollPane inputScrollPane = new JScrollPane(inputTextArea);

    JLabel suggestionsLabel = new JLabel("Suggestions:");
    suggestionsTextArea = new JTextArea(5, 20);
    suggestionsTextArea.setEditable(false);
    JScrollPane suggestionsScrollPane = new JScrollPane(suggestionsTextArea);

    JLabel constructedSentenceLabel = new JLabel("Constructed Sentence:");
    constructedSentenceTextArea = new JTextArea(5, 20);
    constructedSentenceTextArea.setEditable(false);
    JScrollPane constructedSentenceScrollPane = new JScrollPane(
      constructedSentenceTextArea
    );

    inputTextArea.addKeyListener(
      new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {}

        @Override
        public void keyPressed(KeyEvent e) {
          if (
            e.getKeyCode() == KeyEvent.VK_SPACE ||
            e.getKeyCode() == KeyEvent.VK_ENTER
          ) {
            String input = inputTextArea.getText().trim();
            if (!input.isEmpty()) {
              currentSentence += input + " ";
              suggestNextWords(input.trim(), 10);
              inputTextArea.setText("");
              constructedSentenceTextArea.setText(currentSentence);
            }
          }
          if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            constructedSentenceTextArea.setText("");
            inputTextArea.setText("\n"+inputTextArea.getText());
            currentSentence="";
            suggestNextWordsFromRoot();
          }
        }

        @Override
        public void keyReleased(KeyEvent e) {}
      }
    );

    panel.add(inputLabel);
    panel.add(inputScrollPane);
    panel.add(suggestionsLabel);
    panel.add(suggestionsScrollPane);
    panel.add(constructedSentenceLabel);
    panel.add(constructedSentenceScrollPane);

    frame.getContentPane().add(panel);
    frame.setVisible(true);
  }

  private void suggestNextWords(String currentWordString, int nbSuggestions) {
    suggestionsTextArea.setText("");
    suggestionsTextArea.append("Suggestions: ");

    currentWord = findNodeInTree(currentWordString, false);
    if (currentWord != null && !currentWord.nextWords.isEmpty()) {
      List<WordTree> nextWords = currentWord.nextWords;
      int suggestionsCount = Math.min(nbSuggestions, nextWords.size());
      for (int i = 0; i < suggestionsCount; i++) {
        suggestionsTextArea.append(nextWords.get(i).value + " ");
      }
      suggestionsTextArea.append(" : depth " + (currentWord.depth + 1));
    } else {
      suggestNextWordsFromRoot();
    }
  }

  private WordTree findNodeInTree(String value, boolean backToRoot) {
    WordTree tempWord = new WordTree(value, 0);
    for (WordTree child : (backToRoot ? wordTree : currentWord).nextWords) {
      if (child.equals(tempWord)) {
        return child;
      }
    }
    return null;
  }

  private void suggestNextWordsFromRoot() {
    if (!currentSentence.isEmpty()) {
      String[] words = currentSentence.trim().split(" ");
      String lastWord = words[words.length - 1];
      currentWord = wordTree;
      WordTree rootNode = findNodeInTree(lastWord, true);
      if (rootNode != null) {
        suggestionsTextArea.append(
          "\nNo next word found. Returning to level 0..."
        );
        suggestNextWords(rootNode.value, 10);
      }
    }
  }
}
